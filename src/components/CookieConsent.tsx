'use client'

import { useEffect, useRef, useState } from 'react'
import { usePathname } from 'next/navigation'
import { getCookie, setCookie } from '@/app/lib/cookie'

type ConsentPrefs = {
  essential: boolean
  analytics: boolean
  marketing: boolean
  timestamp: string
}

const COOKIE_KEY = 'cc_prefs'
const VERSION_KEY = 'cc_version'

function defaultPrefs(nonEssentialOn = false): ConsentPrefs {
  return {
    essential: true,
    analytics: nonEssentialOn,
    marketing: nonEssentialOn,
    timestamp: new Date().toISOString(),
  }
}

function parsePrefs(s: string | null): ConsentPrefs | null {
  if (!s) return null
  try {
    const obj = JSON.parse(s) as ConsentPrefs
    if (typeof obj.essential !== 'boolean') return null
    if (typeof obj.analytics !== 'boolean') return null
    if (typeof obj.marketing !== 'boolean') return null
    return obj
  } catch {
    return null
  }
}

function announceConsent(p: ConsentPrefs) {
  try {
    if (typeof window !== 'undefined') {
      // @ts-ignore
      if (typeof gtag === 'function') {
        // @ts-ignore
        gtag('consent', 'update', {
          analytics_storage: p.analytics ? 'granted' : 'denied',
          ad_storage: p.marketing ? 'granted' : 'denied',
        })
      }
      // @ts-ignore
      if (Array.isArray(window.dataLayer)) {
        // @ts-ignore
        window.dataLayer.push({ event: 'consent_update', consent: p })
      }
    }
  } catch {}
}

function savePrefs(p: ConsentPrefs) {
  const value = JSON.stringify(p)
  setCookie(COOKIE_KEY, value, 180)
  try { localStorage.setItem(COOKIE_KEY, value) } catch {}
  announceConsent(p)
}

export default function CookieConsent({
  forceBlocking = false,        // ‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
  darkPattern = true,           // ‡∏õ‡∏£‡∏±‡∏ö UI ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πà‡∏ô‡∏ó‡∏≤‡∏á "‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö"
  defaultNonEssentialOn = true, // ‡πÄ‡∏õ‡∏¥‡∏î analytics/marketing ‡πÑ‡∏ß‡πâ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô Settings)
  delayMs = 1200,               // ‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏ú‡∏•‡πà
  nagEveryMs = 15000,           // ‡∏ä‡∏¥‡∏õ nag ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö
  softBlock = true,             // ‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏Å‡∏≠‡∏£‡πå‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡πÄ‡∏õ‡∏¥‡∏î
  askEveryVisit = false,        // ‡∏ñ‡∏≤‡∏°‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏û‡∏à
  reaskIntervalMs = 0,          // ‡πÄ‡∏ß‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ñ‡∏≤‡∏°‡∏ã‡πâ‡∏≥ (0=‡∏õ‡∏¥‡∏î)
  consentVersion,               // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
  reaskOnRouteChange = false,   // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
}: {
  forceBlocking?: boolean
  darkPattern?: boolean
  defaultNonEssentialOn?: boolean
  delayMs?: number
  nagEveryMs?: number
  softBlock?: boolean
  askEveryVisit?: boolean
  reaskIntervalMs?: number
  consentVersion?: string
  reaskOnRouteChange?: boolean
}) {
  const pathname = usePathname()

  const [open, setOpen] = useState(false)
  const [expanded, setExpanded] = useState(false)
  const [prefs, setPrefs] = useState<ConsentPrefs>(defaultPrefs(defaultNonEssentialOn))
  const [confirmReject, setConfirmReject] = useState(false)
  const [nagVisible, setNagVisible] = useState(false)
  const [hasConsent, setHasConsent] = useState(false)

  const timerRef = useRef<number | null>(null)
  const shownRef = useRef(false)

  // ‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏Å‡∏≠‡∏£‡πå‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå (soft block)
  useEffect(() => {
    if (!softBlock) return
    if (open) {
      const orig = document.documentElement.style.overflow
      document.documentElement.style.overflow = 'hidden'
      return () => { document.documentElement.style.overflow = orig }
    }
  }, [open, softBlock])

  // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏≤‡∏°‡πÑ‡∏´‡∏° + ‡πÇ‡∏ä‡∏ß‡πå‡πÅ‡∏ö‡∏ö‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå/‡∏ï‡∏≤‡∏° interaction
  useEffect(() => {
    const fromCookie = parsePrefs(getCookie(COOKIE_KEY))
    const fromLS = (() => {
      try { return parsePrefs(localStorage.getItem(COOKIE_KEY)) } catch { return null }
    })()
    const picked = fromCookie ?? fromLS

    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ñ‡∏≤‡∏°‡∏ã‡πâ‡∏≥
    const shouldReaskByInterval = (() => {
      if (!reaskIntervalMs || !picked) return false
      const last = new Date(picked.timestamp).getTime()
      return Date.now() - last > reaskIntervalMs
    })()

    const shouldReaskByVersion = (() => {
      if (!consentVersion) return false
      try {
        const v = localStorage.getItem(VERSION_KEY)
        return v !== consentVersion
      } catch { return false }
    })()

    const mustAskNow = askEveryVisit || !picked || shouldReaskByInterval || shouldReaskByVersion

    if (picked) {
      setPrefs(picked)
      setHasConsent(true)
      announceConsent(picked) // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤ ‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡πÇ‡∏ä‡∏ß‡πå‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå
    } else {
      setHasConsent(false)
    }

    if (mustAskNow) {
      // ‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ interaction (scroll/move) ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á delay
      const show = () => {
        if (shownRef.current) return
        shownRef.current = true
        setTimeout(() => setOpen(true), delayMs)
      }
      const onScroll = () => show()
      const onMove = () => show()
      window.addEventListener('scroll', onScroll, { once: true, passive: true })
      window.addEventListener('mousemove', onMove, { once: true })
      const fallback = window.setTimeout(show, delayMs + 600)
      if (consentVersion) {
        try { localStorage.setItem(VERSION_KEY, consentVersion) } catch {}
      }
      return () => {
        window.removeEventListener('scroll', onScroll)
        window.removeEventListener('mousemove', onMove)
        clearTimeout(fallback)
      }
    } else {
      setOpen(false)
      shownRef.current = true
    }
  }, [askEveryVisit, reaskIntervalMs, consentVersion, delayMs])

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î reaskOnRouteChange ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ consent ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  useEffect(() => {
    if (!reaskOnRouteChange) return
    if (!hasConsent) return
    setOpen(true)
  }, [reaskOnRouteChange, pathname, hasConsent])
useEffect(() => {
  function onOpen() {
    setOpen(true)
    setConfirmReject(false)
    setNagVisible(false)
  }
  window.addEventListener('open-cookie-consent', onOpen as EventListener)
  return () => window.removeEventListener('open-cookie-consent', onOpen as EventListener)
}, [])
  // ‡∏ä‡∏¥‡∏õ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ consent
  useEffect(() => {
    if (!darkPattern || nagEveryMs <= 0) return
    if (hasConsent) return
    if (open) return
    timerRef.current = window.setInterval(() => setNagVisible(true), nagEveryMs) as unknown as number
    return () => { if (timerRef.current) clearInterval(timerRef.current) }
  }, [darkPattern, nagEveryMs, open, hasConsent])

  function doAcceptAll() {
    const p: ConsentPrefs = {
      essential: true,
      analytics: true,
      marketing: true,
      timestamp: new Date().toISOString(),
    }
    setPrefs(p)
    savePrefs(p)
    setHasConsent(true)
    setOpen(false)
    setNagVisible(false)
  }

  function doRejectNonEssential() {
    const p: ConsentPrefs = {
      essential: true,
      analytics: false,
      marketing: false,
      timestamp: new Date().toISOString(),
    }
    setPrefs(p)
    savePrefs(p)
    setHasConsent(true) // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÅ‡∏ï‡πà‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò non-essential)
    setOpen(false)
    setNagVisible(false)
  }

  function handleAcceptAll() {
    doAcceptAll()
  }

  function handleRejectNonEssential() {
    if (darkPattern) {
      setConfirmReject(true) // confirm ‡∏ã‡πâ‡∏≥
    } else {
      doRejectNonEssential()
    }
  }

  function handleSave() {
    const p: ConsentPrefs = { ...prefs, timestamp: new Date().toISOString() }
    setPrefs(p)
    savePrefs(p)
    setHasConsent(true)
    setOpen(false)
    setNagVisible(false)
  }

  // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ nag
  if (!open && !nagVisible) return null

  // Mini-nag chip
  if (!open && nagVisible && !hasConsent) {
    return (
      <button
        onClick={() => { setOpen(true); setNagVisible(false) }}
        className="fixed bottom-4 right-4 z-[1000] rounded-full bg-white text-zinc-900 px-4 py-2 text-sm shadow-lg ring-1 ring-black/10 hover:scale-105 transition"
        aria-label="Manage cookies"
      >
        üç™ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ
      </button>
    )
  }

  return (
    <div
      className={
        forceBlocking
          ? 'fixed inset-0 z-[1000] bg-black/60 backdrop-blur-sm flex items-end md:items-center justify-center p-4'
          : 'fixed inset-x-0 bottom-0 z-[1000] p-4'
      }
      role="dialog"
      aria-labelledby="cookie-title"
      aria-modal="true"
    >
      <div
        className={
          'w-full max-w-3xl rounded-2xl border border-white/10 bg-zinc-900/95 text-white shadow-xl ' +
          (forceBlocking ? '' : 'mx-auto')
        }
      >
        <div className="p-4 md:p-6">
          <h2 id="cookie-title" className="text-lg md:text-xl font-semibold">
            ‡πÄ‡∏£‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏°‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏•‡∏•‡∏∑‡πà‡∏ô ‚ú®
          </h2>
          <p className="mt-1 text-sm text-white/70">
            ‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏°‡∏≠ ‡∏™‡πà‡∏ß‡∏ô Analytics ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏™‡∏ô‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
            ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠
          </p>

          <div className="mt-4 flex flex-wrap items-center gap-2">
            <button
              autoFocus
              onClick={handleAcceptAll}
              className={
                'rounded-xl px-5 py-2.5 font-semibold shadow focus:outline-none focus:ring-2 ' +
                (darkPattern
                  ? 'bg-white text-zinc-900 hover:scale-[1.02] focus:ring-white/40 transition'
                  : 'bg-white text-zinc-900 focus:ring-white/40')
              }
              aria-label="Accept all cookies and continue"
            >
              ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
            </button>

            <button
              onClick={handleRejectNonEssential}
              className={
                'rounded-xl px-3 py-2 font-medium ' +
                (darkPattern
                  ? 'text-white/70 hover:text-white underline underline-offset-4'
                  : 'bg-white/10 hover:bg-white/15 ring-1 ring-white/10')
              }
            >
              ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà
            </button>

            <button
              onClick={() => setExpanded(v => !v)}
              className="rounded-xl bg-white/10 px-4 py-2 font-medium hover:bg-white/15 ring-1 ring-white/10"
            >
              ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            </button>
          </div>

          {expanded && (
            <div className="mt-4 grid gap-3">
              <ConsentToggle
                title="‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"
                desc={darkPattern
                  ? '‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πà‡∏≠‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏ö‡∏£‡∏∑‡πà‡∏ô'
                  : '‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå (‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)'}
                checked={true}
                disabled
                onChange={() => {}}
              />
              <ConsentToggle
                title={darkPattern ? '‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)' : '‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (Analytics)'}
                desc={darkPattern
                  ? '‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô'
                  : '‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå'}
                checked={prefs.analytics}
                onChange={(v) => setPrefs(p => ({ ...p, analytics: v }))}
              />
              <ConsentToggle
                title={darkPattern ? '‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î (‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏ì)' : '‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î (Marketing)'}
                desc={darkPattern
                  ? '‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡∏µ‡∏•/‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏à‚Äî‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡πÅ‡∏õ‡∏°'
                  : '‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤/‡∏£‡∏µ‡∏°‡∏≤‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ï‡∏ï‡∏¥‡πâ‡∏á'}
                checked={prefs.marketing}
                onChange={(v) => setPrefs(p => ({ ...p, marketing: v }))}
              />

              <div className="mt-2 flex flex-wrap gap-2">
                <button
                  onClick={handleSave}
                  className="rounded-xl bg-white text-zinc-900 px-4 py-2 font-semibold shadow hover:opacity-95"
                >
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ä‡πâ‡∏≠‡∏õ‡∏ï‡πà‡∏≠
                </button>
                {!darkPattern && (
                  <button
                    onClick={() => setExpanded(false)}
                    className="rounded-xl bg-white/10 px-4 py-2 font-medium hover:bg-white/15 ring-1 ring-white/10"
                  >
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </button>
                )}
              </div>
            </div>
          )}
        </div>

        {darkPattern && confirmReject && (
          <div className="border-t border-white/10 bg-black/20 p-4 md:p-5">
            <div className="text-sm text-white/80">
              ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
              ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
            </div>
            <div className="mt-3 flex gap-2">
              <button
                onClick={doRejectNonEssential}
                className="rounded-lg bg-white/10 px-3 py-2 font-medium hover:bg-white/15 ring-1 ring-white/10"
              >
                ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
              </button>
              <button
                onClick={() => setConfirmReject(false)}
                className="rounded-lg bg-white text-zinc-900 px-4 py-2 font-semibold shadow hover:opacity-95"
              >
                ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

function ConsentToggle({
  title,
  desc,
  checked,
  onChange,
  disabled = false,
}: {
  title: string
  desc: string
  checked: boolean
  onChange: (v: boolean) => void
  disabled?: boolean
}) {
  return (
    <div className="flex items-start justify-between gap-4 rounded-xl bg-white/5 p-3 ring-1 ring-white/10">
      <div>
        <div className="font-medium">{title}</div>
        <div className="text-sm text-white/70">{desc}</div>
      </div>
      <label className={'inline-flex items-center gap-2 ' + (disabled ? 'opacity-60' : '')}>
        <input
          type="checkbox"
          className="h-4 w-4 accent-white"
          checked={checked}
          onChange={(e) => onChange(e.target.checked)}
          disabled={disabled}
        />
        <span className="text-sm">{checked ? '‡πÄ‡∏õ‡∏¥‡∏î' : '‡∏õ‡∏¥‡∏î'}</span>
      </label>
    </div>
  )
}
